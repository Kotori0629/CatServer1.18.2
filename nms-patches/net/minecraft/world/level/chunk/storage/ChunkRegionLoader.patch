--- a/net/minecraft/world/level/chunk/storage/ChunkRegionLoader.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkRegionLoader.java
@@ -117,7 +117,7 @@
                     });
                     logger = ChunkRegionLoader.LOGGER;
                     Objects.requireNonNull(logger);
-                    datapaletteblock = (DataPaletteBlock) dataresult.getOrThrow(false, logger::error);
+                    datapaletteblock = (DataPaletteBlock) ((DataResult<DataPaletteBlock<IBlockData>>) dataresult).getOrThrow(false, logger::error); // CraftBukkit - decompile error
                 } else {
                     datapaletteblock = new DataPaletteBlock<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), DataPaletteBlock.e.SECTION_STATES);
                 }
@@ -130,7 +130,7 @@
                     });
                     logger = ChunkRegionLoader.LOGGER;
                     Objects.requireNonNull(logger);
-                    datapaletteblock1 = (DataPaletteBlock) dataresult.getOrThrow(false, logger::error);
+                    datapaletteblock1 = (DataPaletteBlock) ((DataResult<DataPaletteBlock<Holder<BiomeBase>>>) dataresult).getOrThrow(false, logger::error); // CraftBukkit - decompile error
                 } else {
                     datapaletteblock1 = new DataPaletteBlock<>(iregistry.asHolderIdMap(), iregistry.getHolderOrThrow(Biomes.PLAINS), DataPaletteBlock.e.SECTION_BIOMES);
                 }
@@ -161,7 +161,7 @@
             dataresult = BlendingData.CODEC.parse(new Dynamic(DynamicOpsNBT.INSTANCE, nbttagcompound.getCompound("blending_data")));
             logger1 = ChunkRegionLoader.LOGGER;
             Objects.requireNonNull(logger1);
-            blendingdata = (BlendingData) dataresult.resultOrPartial(logger1::error).orElse((Object) null);
+            blendingdata = (BlendingData) ((DataResult<BlendingData>) dataresult).resultOrPartial(logger1::error).orElse(null); // CraftBukkit - decompile error
         } else {
             blendingdata = null;
         }
@@ -192,7 +192,7 @@
                 dataresult = BelowZeroRetrogen.CODEC.parse(new Dynamic(DynamicOpsNBT.INSTANCE, nbttagcompound.getCompound("below_zero_retrogen")));
                 logger1 = ChunkRegionLoader.LOGGER;
                 Objects.requireNonNull(logger1);
-                Optional optional = dataresult.resultOrPartial(logger1::error);
+                Optional<BelowZeroRetrogen> optional = ((DataResult<BelowZeroRetrogen>) dataresult).resultOrPartial(logger1::error); // CraftBukkit - decompile error
 
                 Objects.requireNonNull(protochunk);
                 optional.ifPresent(protochunk::setBelowZeroRetrogen);
@@ -221,6 +221,13 @@
             }
         }
 
+        // CraftBukkit start - load chunk persistent data from nbt - SPIGOT-6814: Already load PDC here to account for 1.17 to 1.18 chunk upgrading.
+        net.minecraft.nbt.NBTBase persistentBase = nbttagcompound.get("ChunkBukkitValues");
+        if (persistentBase instanceof NBTTagCompound) {
+            ((IChunkAccess) object).persistentDataContainer.putAll((NBTTagCompound) persistentBase);
+        }
+        // CraftBukkit end
+
         ((IChunkAccess) object).setLightCorrect(flag);
         NBTTagCompound nbttagcompound2 = nbttagcompound.getCompound("Heightmaps");
         EnumSet<HeightMap.Type> enumset = EnumSet.noneOf(HeightMap.Type.class);
@@ -323,7 +330,7 @@
         nbttagcompound.putLong("InhabitedTime", ichunkaccess.getInhabitedTime());
         nbttagcompound.putString("Status", ichunkaccess.getStatus().getName());
         BlendingData blendingdata = ichunkaccess.getBlendingData();
-        DataResult dataresult;
+        DataResult<NBTBase> dataresult; // CraftBukkit - decompile error
         Logger logger;
 
         if (blendingdata != null) {
@@ -370,7 +377,7 @@
 
                 if (flag1) {
                     ChunkSection chunksection = achunksection[j];
-                    DataResult dataresult1 = ChunkRegionLoader.BLOCK_STATE_CODEC.encodeStart(DynamicOpsNBT.INSTANCE, chunksection.getStates());
+                    DataResult<NBTBase> dataresult1 = ChunkRegionLoader.BLOCK_STATE_CODEC.encodeStart(DynamicOpsNBT.INSTANCE, chunksection.getStates()); // CraftBukkit - decompile error
                     Logger logger1 = ChunkRegionLoader.LOGGER;
 
                     Objects.requireNonNull(logger1);
@@ -454,6 +461,11 @@
 
         nbttagcompound.put("Heightmaps", nbttagcompound3);
         nbttagcompound.put("structures", packStructureData(StructurePieceSerializationContext.fromLevel(worldserver), chunkcoordintpair, ichunkaccess.getAllStarts(), ichunkaccess.getAllReferences()));
+        // CraftBukkit start - store chunk persistent data in nbt
+        if (!ichunkaccess.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
+            nbttagcompound.put("ChunkBukkitValues", ichunkaccess.persistentDataContainer.toTagCompound());
+        }
+        // CraftBukkit end
         return nbttagcompound;
     }
 
