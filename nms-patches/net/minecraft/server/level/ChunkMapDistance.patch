--- a/net/minecraft/server/level/ChunkMapDistance.java
+++ b/net/minecraft/server/level/ChunkMapDistance.java
@@ -126,10 +126,25 @@
         }
 
         if (!this.chunksToUpdateFutures.isEmpty()) {
-            this.chunksToUpdateFutures.forEach((playerchunk) -> {
+            // CraftBukkit start
+            // Iterate pending chunk updates with protection against concurrent modification exceptions
+            java.util.Iterator<PlayerChunk> iter = this.chunksToUpdateFutures.iterator();
+            int expectedSize = this.chunksToUpdateFutures.size();
+            do {
+                PlayerChunk playerchunk = iter.next();
+                iter.remove();
+                expectedSize--;
+
                 playerchunk.updateFutures(playerchunkmap, this.mainThreadExecutor);
-            });
-            this.chunksToUpdateFutures.clear();
+
+                // Reset iterator if set was modified using add()
+                if (this.chunksToUpdateFutures.size() != expectedSize) {
+                    expectedSize = this.chunksToUpdateFutures.size();
+                    iter = this.chunksToUpdateFutures.iterator();
+                }
+            } while (iter.hasNext());
+            // CraftBukkit end
+
             return true;
         } else {
             if (!this.ticketsToRelease.isEmpty()) {
@@ -165,7 +180,7 @@
         }
     }
 
-    void addTicket(long i, Ticket<?> ticket) {
+    boolean addTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
         ArraySetSorted<Ticket<?>> arraysetsorted = this.getTickets(i);
         int j = getTicketLevelAt(arraysetsorted);
         Ticket<?> ticket1 = (Ticket) arraysetsorted.addOrGet(ticket);
@@ -175,13 +190,15 @@
             this.ticketTracker.update(i, ticket.getTicketLevel(), true);
         }
 
+        return ticket == ticket1; // CraftBukkit
     }
 
-    void removeTicket(long i, Ticket<?> ticket) {
+    boolean removeTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
         ArraySetSorted<Ticket<?>> arraysetsorted = this.getTickets(i);
 
+        boolean removed = false; // CraftBukkit
         if (arraysetsorted.remove(ticket)) {
-            ;
+            removed = true; // CraftBukkit
         }
 
         if (arraysetsorted.isEmpty()) {
@@ -189,6 +206,7 @@
         }
 
         this.ticketTracker.update(i, getTicketLevelAt(arraysetsorted), false);
+        return removed; // CraftBukkit
     }
 
     public <T> void addTicket(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
@@ -202,19 +220,33 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
+        // CraftBukkit start
+        addRegionTicketAtDistance(tickettype, chunkcoordintpair, i, t0);
+    }
+
+    public <T> boolean addRegionTicketAtDistance(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
+        // CraftBukkit end
         Ticket<T> ticket = new Ticket<>(tickettype, 33 - i, t0);
         long j = chunkcoordintpair.toLong();
 
-        this.addTicket(j, ticket);
+        boolean added = this.addTicket(j, ticket); // CraftBukkit
         this.tickingTicketsTracker.addTicket(j, ticket);
+        return added; // CraftBukkit
     }
 
     public <T> void removeRegionTicket(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
+        // CraftBukkit start
+        removeRegionTicketAtDistance(tickettype, chunkcoordintpair, i, t0);
+    }
+
+    public <T> boolean removeRegionTicketAtDistance(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
+        // CraftBukkit end
         Ticket<T> ticket = new Ticket<>(tickettype, 33 - i, t0);
         long j = chunkcoordintpair.toLong();
 
-        this.removeTicket(j, ticket);
+        boolean removed = this.removeTicket(j, ticket); // CraftBukkit
         this.tickingTicketsTracker.removeTicket(j, ticket);
+        return removed; // CraftBukkit
     }
 
     private ArraySetSorted<Ticket<?>> getTickets(long i) {
@@ -253,6 +285,7 @@
         ChunkCoordIntPair chunkcoordintpair = sectionposition.chunk();
         long i = chunkcoordintpair.toLong();
         ObjectSet<EntityPlayer> objectset = (ObjectSet) this.playersPerChunk.get(i);
+        if (objectset == null) return; // CraftBukkit - SPIGOT-6208
 
         objectset.remove(entityplayer);
         if (objectset.isEmpty()) {
@@ -382,6 +415,26 @@
         return !this.tickets.isEmpty();
     }
 
+    // CraftBukkit start
+    public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+        Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+
+        for (java.util.Iterator<Entry<ArraySetSorted<Ticket<?>>>> iterator = this.tickets.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+            Entry<ArraySetSorted<Ticket<?>>> entry = iterator.next();
+            ArraySetSorted<Ticket<?>> tickets = entry.getValue();
+            if (tickets.remove(target)) {
+                // copied from removeTicket
+                this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt(tickets), false);
+
+                // can't use entry after it's removed
+                if (tickets.isEmpty()) {
+                    iterator.remove();
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+
     private class a extends ChunkMap {
 
         public a() {
