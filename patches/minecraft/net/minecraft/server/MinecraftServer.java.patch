--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1,5 +_,6 @@
 package net.minecraft.server;
 
+import catserver.server.utils.MinecraftServerHelper;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -10,6 +_,7 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -51,6 +_,9 @@
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -65,6 +_,7 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.data.worldgen.features.MiscOverworldFeatures;
 import net.minecraft.gametest.framework.GameTestTicker;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
@@ -144,21 +_,16 @@
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
-import net.minecraft.world.level.storage.CommandStorage;
-import net.minecraft.world.level.storage.DerivedLevelData;
-import net.minecraft.world.level.storage.DimensionDataStorage;
-import net.minecraft.world.level.storage.LevelData;
-import net.minecraft.world.level.storage.LevelResource;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.PlayerDataStorage;
-import net.minecraft.world.level.storage.ServerLevelData;
-import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.storage.*;
 import net.minecraft.world.level.storage.loot.ItemModifierManager;
 import net.minecraft.world.level.storage.loot.LootTables;
 import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.craftbukkit.v1_18_R2.CraftServer;
 import org.slf4j.Logger;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
@@ -183,8 +_,8 @@
    public static final LevelSettings f_129743_ = new LevelSettings("Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackConfig.f_45842_);
    private static final long f_177871_ = 50L;
    public static final GameProfile f_195496_ = new GameProfile(Util.f_137441_, "Anonymous Player");
-   protected final LevelStorageSource.LevelStorageAccess f_129744_;
-   protected final PlayerDataStorage f_129745_;
+   public final LevelStorageSource.LevelStorageAccess f_129744_;
+   public final PlayerDataStorage f_129745_;
    private final List<Runnable> f_129752_ = Lists.newArrayList();
    private MetricsRecorder f_177872_ = InactiveMetricsRecorder.f_146153_;
    private ProfilerFiller f_129754_ = this.f_177872_.m_142610_();
@@ -198,14 +_,14 @@
    private MinecraftServer.TimeProfiler f_177876_;
    private boolean f_177877_;
    private final ServerConnectionListener f_129755_;
-   private final ChunkProgressListenerFactory f_129756_;
+   public final ChunkProgressListenerFactory f_129756_;
    private final ServerStatus f_129757_ = new ServerStatus();
    private final Random f_129758_ = new Random();
-   private final DataFixer f_129759_;
+   public final DataFixer f_129759_;
    private String f_129760_;
    private int f_129761_ = -1;
-   private final RegistryAccess.Frozen f_129746_;
-   private final Map<ResourceKey<Level>, ServerLevel> f_129762_ = Maps.newLinkedHashMap();
+   public final RegistryAccess.Frozen f_129746_;
+   public final Map<ResourceKey<Level>, ServerLevel> f_129762_ = Maps.newLinkedHashMap();
    private PlayerList f_129763_;
    private volatile boolean f_129764_ = true;
    private boolean f_129765_;
@@ -234,7 +_,7 @@
    @Nullable
    private final GameProfileCache f_129723_;
    private long f_129724_;
-   private final Thread f_129725_;
+   public final Thread f_129725_;
    protected long f_129726_ = Util.m_137550_();
    private long f_129727_;
    private boolean f_129728_;
@@ -247,17 +_,48 @@
    private final FrameTimer f_129735_ = new FrameTimer();
    private boolean f_129736_;
    private float f_129737_;
-   private final Executor f_129738_;
+   public final Executor f_129738_;
    @Nullable
    private String f_129739_;
-   private MinecraftServer.ReloadableResources f_129740_;
+   public MinecraftServer.ReloadableResources f_129740_;
    private final StructureManager f_129741_;
    protected final WorldData f_129749_;
    private volatile boolean f_195494_;
+   // CraftBukkit start
+   public DataPackConfig datapackconfiguration;
+   public DynamicOps<Tag> registryreadops;
+   public org.bukkit.craftbukkit.v1_18_R2.CraftServer server;
+   public OptionSet options;
+   public org.bukkit.command.ConsoleCommandSender console;
+   public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+   public ConsoleReader reader;
+   public static int currentTick = (int) (System.currentTimeMillis() / 50);
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+   // CraftBukkit end
+
+   @Deprecated
+   public static MinecraftServer getServer() {
+      return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+   }
+
+   public boolean isDebugging() {
+      return false;
+   }
+
+   // CatServer start
+   public void prepareMinecraftServer(OptionSet options, DataPackConfig dpc, DynamicOps<Tag> dynamicOps) {
+      this.options = options;
+      this.datapackconfiguration = dpc;
+      this.registryreadops = dynamicOps;
+   }
+   // CatServer end
 
    public static <S extends MinecraftServer> S m_129872_(Function<Thread, S> p_129873_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, () -> {
          atomicreference.get().m_130011_();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> {
@@ -275,6 +_,7 @@
 
    public MinecraftServer(Thread p_206546_, LevelStorageSource.LevelStorageAccess p_206547_, PackRepository p_206548_, WorldStem p_206549_, Proxy p_206550_, DataFixer p_206551_, @Nullable MinecraftSessionService p_206552_, @Nullable GameProfileRepository p_206553_, @Nullable GameProfileCache p_206554_, ChunkProgressListenerFactory p_206555_) {
       super("Server");
+      this.prepareMinecraftServer(MinecraftServerHelper.getInstance().getOptionSet(), MinecraftServerHelper.getInstance().getDataPackConfig(), MinecraftServerHelper.getInstance().getDynamicOps()); // CatServer - fire
       this.f_129746_ = p_206549_.f_206894_();
       this.f_129749_ = p_206549_.f_206895_();
       this.f_129747_ = p_206550_;
@@ -296,7 +_,31 @@
       this.f_129741_ = new StructureManager(p_206549_.f_206892_(), p_206547_, p_206551_);
       this.f_129725_ = p_206546_;
       this.f_129738_ = Util.m_183991_();
+
+      this.vanillaCommandDispatcher = p_206549_.f_206893_().f_206847_; // CraftBukkit
+      // Try to see if we're actually running in a terminal, disable jline if not
+      if (System.console() == null && System.getProperty("jline.terminal") == null) {
+         System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+         Main.useJline = false;
+      }
+      try {
+         reader = new ConsoleReader(System.in, System.out);
+         reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+      } catch (Throwable e) {
+         try {
+            // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            System.setProperty("user.language", "en");
+            Main.useJline = false;
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false);
+         } catch (IOException ex) {
+            f_129750_.warn((String) null, ex);
+         }
+      }
+      Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.v1_18_R2.util.ServerShutdownThread(this));
    }
+   // CraftBukkit end
 
    private void m_129841_(DimensionDataStorage p_129842_) {
       p_129842_.m_164861_(this.m_129896_()::m_180013_, this.m_129896_()::m_180015_, "scoreboard");
@@ -358,6 +_,7 @@
       this.m_129841_(dimensiondatastorage);
       this.f_129732_ = new CommandStorage(dimensiondatastorage);
       WorldBorder worldborder = serverlevel.m_6857_();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(f_129762_.get(Level.f_46428_)));
       if (!serverleveldata.m_6535_()) {
          try {
             m_177896_(serverlevel, serverleveldata, worldgensettings.m_64660_(), flag);
@@ -394,6 +_,7 @@
             ServerLevel serverlevel1 = new ServerLevel(this, this.f_129738_, this.f_129744_, derivedleveldata, resourcekey1, holder1, p_129816_, chunkgenerator1, flag, j, ImmutableList.of(), false);
             worldborder.m_61929_(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.m_6857_()));
             this.f_129762_.put(resourcekey1, serverlevel1);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(f_129762_.get(resourcekey)));
          }
       }
 
@@ -405,6 +_,7 @@
          p_177898_.m_7250_(BlockPos.f_121853_.m_6630_(80), 0.0F);
       } else {
          ChunkGenerator chunkgenerator = p_177897_.m_7726_().m_8481_();
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
          ChunkPos chunkpos = new ChunkPos(chunkgenerator.m_183403_().m_183230_());
          int i = chunkgenerator.m_142051_(p_177897_);
          if (i < p_177897_.m_141937_()) {
@@ -485,6 +_,7 @@
                ChunkPos chunkpos = new ChunkPos(i);
                serverlevel1.m_7726_().m_6692_(chunkpos, true);
             }
+            net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
          }
       }
 
@@ -568,8 +_,29 @@
       this.m_7041_();
    }
 
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // CraftBukkit end
+
    public void m_7041_() {
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized(stopLock) {
+         if (hasStopped) return;
+         hasStopped = true;
+      }
+      // CraftBukkit end
       f_129750_.info("Stopping server");
+      // CraftBukkit start
+      if (this.server != null) {
+         this.server.disablePlugins();
+      }
+      // CraftBukkit end
       if (this.m_129919_() != null) {
          this.m_129919_().m_9718_();
       }
@@ -579,6 +_,7 @@
          f_129750_.info("Saving players");
          this.f_129763_.m_11302_();
          this.f_129763_.m_11313_();
+         try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
       }
 
       f_129750_.info("Saving worlds");
@@ -609,6 +_,7 @@
       for(ServerLevel serverlevel2 : this.m_129785_()) {
          if (serverlevel2 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverlevel2));
                serverlevel2.close();
             } catch (IOException ioexception1) {
                f_129750_.error("Exception closing the level", (Throwable)ioexception1);
@@ -654,6 +_,7 @@
    protected void m_130011_() {
       try {
          if (this.m_7038_()) {
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStarted(this);
             this.f_129726_ = Util.m_137550_();
             this.f_129757_.m_134908_(new TextComponent(this.f_129709_));
             this.f_129757_.m_134912_(new ServerStatus.Version(SharedConstants.m_183709_().getName(), SharedConstants.m_183709_().getProtocolVersion()));
@@ -686,7 +_,10 @@
                this.f_129717_ = true;
                JvmProfiler.f_185340_.m_183597_(this.f_129737_);
             }
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.m_7268_((CrashReport)null);
          }
       } catch (Throwable throwable1) {
@@ -700,6 +_,7 @@
             f_129750_.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.m_7268_(crashreport);
       } finally {
          try {
@@ -712,6 +_,7 @@
                this.f_129723_.m_196559_();
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
             this.m_6988_();
          }
 
@@ -753,7 +_,7 @@
       });
    }
 
-   protected TickTask m_6681_(Runnable p_129852_) {
+   public TickTask m_6681_(Runnable p_129852_) {
       return new TickTask(this.f_129766_, p_129852_);
    }
 
@@ -826,6 +_,7 @@
 
    public void m_5705_(BooleanSupplier p_129871_) {
       long i = Util.m_137569_();
+      net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_);
       ++this.f_129766_;
       this.m_5703_(p_129871_);
       if (i - this.f_129724_ >= 5000000000L) {
@@ -847,6 +_,7 @@
             Collections.shuffle(Arrays.asList(agameprofile));
             this.f_129757_.m_134914_().m_134924_(agameprofile);
          }
+         this.f_129757_.invalidateJson();
       }
 
       if (this.f_129766_ % 6000 == 0) {
@@ -863,6 +_,7 @@
       long i1 = Util.m_137569_();
       this.f_129735_.m_13755_(i1 - i);
       this.f_129754_.m_7238_();
+      net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_);
    }
 
    public void m_5703_(BooleanSupplier p_129954_) {
@@ -870,7 +_,8 @@
       this.m_129890_().m_136128_();
       this.f_129754_.m_6182_("levels");
 
-      for(ServerLevel serverlevel : this.m_129785_()) {
+      for(ServerLevel serverlevel : this.getWorldArray()) {
+         long tickStart = Util.m_137569_();
          this.f_129754_.m_6521_(() -> {
             return serverlevel + " " + serverlevel.m_46472_().m_135782_();
          });
@@ -881,6 +_,7 @@
          }
 
          this.f_129754_.m_6180_("tick");
+         net.minecraftforge.event.ForgeEventFactory.onPreWorldTick(serverlevel, p_129954_);
 
          try {
             serverlevel.m_8793_(p_129954_);
@@ -889,16 +_,18 @@
             serverlevel.m_6026_(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.minecraftforge.event.ForgeEventFactory.onPostWorldTick(serverlevel, p_129954_);
 
          this.f_129754_.m_7238_();
          this.f_129754_.m_7238_();
+         perWorldTickTimes.computeIfAbsent(serverlevel.m_46472_(), k -> new long[100])[this.f_129766_ % 100] = Util.m_137569_() - tickStart;
       }
 
       this.f_129754_.m_6182_("connection");
       this.m_129919_().m_9721_();
       this.f_129754_.m_6182_("players");
       this.f_129763_.m_11288_();
-      if (SharedConstants.f_136183_) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          GameTestTicker.f_177648_.m_127790_();
       }
 
@@ -966,7 +_,7 @@
 
    @DontObfuscate
    public String m_130001_() {
-      return "vanilla";
+      return net.minecraftforge.internal.BrandingControl.getServerBranding();
    }
 
    public SystemReport m_177935_(SystemReport p_177936_) {
@@ -1316,6 +_,7 @@
          this.m_6846_().m_11315_();
          this.f_129734_.m_136120_(this.f_129740_.f_206585_.m_206860_());
          this.f_129741_.m_74335_(this.f_129740_.f_206584_);
+         this.m_6846_().m_11314_().forEach(this.m_6846_()::m_11289_); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.m_18695_()) {
          this.m_18701_(completablefuture::isDone);
@@ -1325,10 +_,13 @@
    }
 
    public static DataPackConfig m_129819_(PackRepository p_129820_, DataPackConfig p_129821_, boolean p_129822_) {
+      net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_129820_, net.minecraftforge.server.ServerLifecycleHooks::buildPackFinder);
       p_129820_.m_10506_();
+      DataPackConfig.f_45842_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_129821_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_129822_) {
-         p_129820_.m_10509_(Collections.singleton("vanilla"));
-         return new DataPackConfig(ImmutableList.of("vanilla"), ImmutableList.of());
+         p_129820_.m_10509_(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DataPackConfig(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1479,6 +_,31 @@
 
    public abstract boolean m_7779_(GameProfile p_129840_);
 
+   private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(ResourceKey<Level> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+      return this.f_129762_;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerLevel[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerLevel[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.f_129762_.values().stream().toArray(x -> new ServerLevel[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void m_142116_(Path p_177911_) throws IOException {
    }
 
@@ -1734,6 +_,10 @@
       return this.f_129749_;
    }
 
+   public MinecraftServer.ReloadableResources getServerResources() {
+       return f_129740_;
+   }
+
    public RegistryAccess.Frozen m_206579_() {
       return this.f_129746_;
    }
@@ -1784,6 +_,12 @@
          this.f_177876_ = null;
          return profileresults;
       }
+   }
+
+   public void prepareLevels(ChunkProgressListener progressListener, ServerLevel internal) {
+   }
+
+   public void initWorld(ServerLevel internal, PrimaryLevelData worlddata, PrimaryLevelData worlddata1, WorldGenSettings worldGenSettings) {
    }
 
    public static record ReloadableResources(CloseableResourceManager f_206584_, ReloadableServerResources f_206585_) implements AutoCloseable {
